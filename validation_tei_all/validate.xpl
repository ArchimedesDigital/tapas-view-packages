<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  XProc pipeline to return error messages from both RELAX NG and Schematron
  validation and pipe them through an XSLT program to make pretty HTML out
  of 'em.
  Started 2017-10 by Syd Bauman. Copyleft 2017 Syd Bauman and the TAPAS project.
  
  As currently coded, the schemas used are the current released version of
  the tei_all schema, obtained from the web. We should probably find a way
  to cache them locally, but we need to institute an update mechanism to make
  that work.
-->
<p:declare-step version="1.0" name="main" type="tapas:validity-report"
  xmlns:p="http://www.w3.org/ns/xproc"
  xmlns:c="http://www.w3.org/ns/xproc-step"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:tapas="http://www.wheatoncollege.edu/TAPAS/1.0">

  <!-- TEI input file is primary input port "source" -->
  <p:input port="source" primary="true"/>
  <!-- The TEI tei_all RELAX NG (XML syntax) grammar is input port "grammar" -->
  <p:input port="grammar">
    <p:document href="http://www.tei-c.org/Vault/P5/current/xml/tei/custom/schema/relaxng/tei_all.rng"/>
  </p:input>
  <!-- The TEI ISO Schematron schema is input port "rules". See [1] -->
  <p:input port="rules">
    <p:document href="http://www.tei-c.org/Vault/P5/current/xml/tei/Exemplars/tei_all.isosch"/>
  </p:input>
  <!-- The only output port is the HTML to display to user -->
  <p:output port="result" primary="true" sequence="false">
    <!-- Note the 'fullHTML' parameter in the "post-process" step -->
    <!-- controls whether we return an HTML document or just a    -->
    <!-- single <html:div> element for inclusion in an existing   -->
    <!-- window. -->
    <p:pipe step="post-process" port="result"/>
  </p:output>
  <p:documentation>
    <tei:p>The data generated by the validation (i.e., the data flowing from
      the validation steps to the XSL transformation step) is a singe XML
      document which (I think) should match the following declaration:
      <tei:code style="display:block;white-space:pre;">
    element tapas:errors { RNG?, SCH } 
    RNG = element c:errors { c:error+ }
    SCH = element svrl:schematron-output { [2] }&#x0A;</tei:code>
    That is, there will be no <tei:gi>c:errors</tei:gi> child unless
    there were errors found by RELAX NG validation; there will be a
    full SVRL report whether or not any assertions or reports
    generated messages.</tei:p>
    <tei:p>Note: If the RELAX NG validator generates
    error output based on the embedded Schematron in the RELAX NG
    schema, they are summarily discarded.</tei:p>
    <tei:p><tei:label>[1]</tei:label> When run in oXygen, duplicate
    namespace declarations do not seem to be a problem. (They are in
    `probatron`, although the spec does not say they should be.) I
    have not tested in eXist, yet.</tei:p>
    <tei:p><tei:label>[2]</tei:label> The SCH output is in the
    Schematron validation report language; see Annex D of ISO
    19757-3:2016.</tei:p></p:documentation>

  <p:group name="get-rng-errors">
    <p:output port="result">
      <p:pipe port="result" step="filter-rng"/>
    </p:output>
    <p:try name="try-rng">
      <p:group>
        <p:output port="result" primary="true">
          <p:pipe step="v-rng" port="result"/>
        </p:output>
        <p:validate-with-relax-ng name="v-rng" assert-valid="true">
          <p:input port="source">
            <p:pipe step="main" port="source"/>
          </p:input>
          <p:input port="schema">
            <p:pipe step="main" port="grammar"/>
          </p:input>
          <p:with-option name="dtd-attribute-values" select="'false'"/>
          <p:with-option name="dtd-id-idref-warnings" select="'false'"/>
        </p:validate-with-relax-ng>
      </p:group>
      <p:catch name="catch">
        <p:output port="result" primary="true">
          <p:pipe step="copy-errors" port="result"/>
        </p:output>
        <p:identity name="copy-errors">
          <p:input port="source">
            <p:pipe step="catch" port="error"/>
          </p:input>
        </p:identity>
      </p:catch>
    </p:try>
    <!-- Some processors will, I believe, also give us the SVRL from running  -->
    <!-- the embedded Schematron; we don't want that, as the TEI .isosch file -->
    <!-- has better Schematron than that which is in the .rng file. So here   -->
    <!-- we filter anything that is not a RELAX NG error out. -->
    <p:filter name="filter-rng" select="node()[ancestor-or-self::c:errors]"/>
  </p:group>

  <p:group name="get-sch-errors">
    <p:output port="result">
      <p:pipe port="result" step="get-svrl-report"/>
    </p:output>
    <p:validate-with-schematron name="v-sch" assert-valid="false">
      <p:input port="source">
        <p:pipe step="main" port="source"/>
      </p:input>
      <p:input port="schema">
        <p:pipe step="main" port="rules"/>
      </p:input>
      <p:input port="parameters">
        <p:empty/>
      </p:input>
      <p:with-option name="phase" select="'#ALL'"/>
    </p:validate-with-schematron>
    <p:sink>
      <p:input port="source">
        <p:pipe port="result" step="v-sch"/>
      </p:input>
    </p:sink>
    <p:identity name="get-svrl-report">
      <p:input port="source">
        <p:pipe port="report" step="v-sch"/>
      </p:input>
    </p:identity>
  </p:group>

  <!-- Merge both sets of error messages into a single XML document -->
  <p:pack wrapper="tapas:errors" name="take-both">
    <p:input port="source">
      <p:pipe port="result" step="get-rng-errors"/>
    </p:input>
    <p:input port="alternate">
      <p:pipe port="result" step="get-sch-errors"/>
    </p:input>
  </p:pack>

  <!-- Process that document with a particular XSLT program -->
  <p:xslt name="post-process">
    <p:input port="source">
      <p:pipe port="result" step="take-both"/>
    </p:input>
    <p:input port="stylesheet">
      <p:document href="process_messages.xslt"/>
    </p:input>
    <p:with-param name="fullHTML" select="'true'"/>
  </p:xslt>

</p:declare-step>
