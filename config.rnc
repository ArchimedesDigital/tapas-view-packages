datatypes xs   = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace tapas="http://www.wheatoncollege.edu/TAPAS/1.0"
namespace html ="http://www.w3.org/1999/xhtml"

# RELAX NG schema for TAPAS View Package configuration files.
# Written 2017-01-04 by Syd Bauman & Ashley Clark
# Copyleft

start = element tapas:view_package {

   ## the version number of the *package* document
   attribute version { xs:string { pattern = "[0-9]+(\.[0-9]+(\.[0-9]+[αβ]?)?)?" } },

   ## the ID is the name of this package from the computer's point of view (e.g., "color-blocks")
   attribute xml:id { xs:ID },

   ## the name from a human's point of view (e.g., "Color Blocks")
   element tapas:human_name { text },

   ## false means static, i.e. there is an HTML or other output file sitting around ready to
   ## be served out
   attribute dynamic { xs:boolean },

   ## whether the usable or expected input is:
   ##  * a single TEI file,
   ##  * a selected set of TEI files, 
   ##  * an entire collection, or
   ##  * all the collections in an entire project
   ##  * all of the publicly viewable documents in TAPAS 
   attribute scope { "file" | "found_set" | "collection" | "project" | "public" },

   ## Short (1 para) human-readable description to be published; can use in-line HTML elements
   element tapas:description { phrase* },

   ## The kind(s) of files this view package can handle as the main input
   element tapas:file_types { file_type+ },

   ## The git branch that should be pulled to production hydra/rails and eXist
   ## only used for sub-modules that are their own repo; we always use 'master'
   ## for those that are directly in the tapas-viewpackages repo, in which case
   ## this element can be empty.
   # Here we only enforce that characters
   #    U+00-U+1F, U+7F, U+20, ~, ^, :, ?, *, \, and [
   # are not allowed. There are other restrictions to branch names, for which see
   # https://git-scm.com/docs/git-check-ref-format
   element tapas:git_branch { xsd:token { pattern = "[^  ~^:?*\\\[]*" } },
   # regexp obtained by using
   #   <param name="pattern">[^&#x09;&#x7F; ~^:?*\\\[]*</param>
   # in a little test file and converting to RNC with trang. :-)

   ## The CSS files(s) that should be explicitly loaded by the generated HTML
   element tapas:css_files { css_file* },

   ## The Javascript file(s) that should be explicitly loaded by the generated HTML
   element tapas:js_files { js_file* },

   ## Parameters from Hydra to eXist
   element tapas:parameters { parameter* },

   ## EITHER use XProc or direct execution of ( constraints, ( XQuery+ | XSLT+ ) )
   # HOWEVER note that for the moment XQuery is not supported (because it's a pain
   # to execute an XQuery from within the tapas-xq XQuery that is handling the 
   # request in eXist).
   ( manual | xproc | xslt )
}


manual =
   # list of useful schemas against which candidate input files should
   # be run, in the order specified. (If & when we have the capability
   # to run validity tests in parallel we will need a different
   # container element or some such.) I (Syd) am not sure why we have
   # this separate from <tapas:XProc>, below. I'm guessing that we
   # anticipate there will be packages that use XProc and those that
   # don't.
   element tapas:constraints { constraint* },
   ( xquery+ | xslt+ )


# The XQuery to be run to generate output from input file(s).
# Currently presumed to be a file in the same directory as this
# config file.
xquery = element tapas:run {
   attribute type {"xquery"},
   attribute pgm { xs:NMTOKEN },
   parameter*
}
# The XSLT to be run to generate output from input file(s).
# Currently presumed to be a file in the same directory as this
# config file.
xslt = element tapas:run {
   attribute type {"xslt"},
   attribute pgm { xs:NMTOKEN },
   parameter*
}
# The XProc to be run to generate output from input file(s).
# Currently presumed to be a file in the same directory as this
# config file.
xproc = element tapas:run {
   attribute type {"xproc"},
   attribute pgm { xs:NMTOKEN },
   step
}

file_type = 
## A type of TAPAS file. Allowed values are 'odd', 'ography', 'tei', or 'xslt'.
element tapas:file_type { "ography" | "tei" | "odd" | "xslt" }

parameter = 
## A description of an HTTP request parameter
element tapas:parameter {
   ## The name of the parameter
   attribute name { xs:NMTOKEN },
   ## The datatype to be used for the parameter's value
   attribute as { xs:string },
   text
   }
step = element tapas:step {
   (
      # for our current eXist (2.2) we need to specify the step name
      # by matching the value of @type exactly, including prefix (which
      # is just wrong, but there you have it)
      attribute qname { xs:QName }
      |
      # for eXist 3.5 and later we will be able to correctly separate
      # these two bits of information from the namespace prefix you
      # happen to choose; not sure if we're going to want to use these
      # or not, but here they are just in case.
      ( attribute ns { xs:anyURI }, attribute localname { xs:NCName } )
   ),
   # Has to be at least one primary input port, probably 'source', whose input is the input file
   # Someday there might be more than one input, though.
   input_port+,
   # To be balanced, we've decided to be explicit about the output port here, although
   # for the foreseeable future it will always be <tapas:port put="out" primary="true">result</>.
   output_port,
   # specify as many options as needed
   option*
   }

constraint = 
## Relative path to a single schema, for now either RELAX NG or ISO Schematron.
## The system may either differentiate by extension, or use the value of the
## @scheme attribute.
# Possibilities are:
#    extn     @scheme      kind
#    ----     --------     ----------------
#  * .rnc     RNC          RELAX NG compact syntax
#  * .rng     RNG          RELAX NG XML syntax
#  * .sch     Schematron   ISO Schematron
#  * .isosch  Schematron   ISO Schematron
# It is an error (that we don't test for) to specify "RNG" on a .rnc file, e.g.
# Note that ODD files are not in the list. If you need to validate against the
# output of an ODD, for now you need to generate that separately and include
# the output here.)
element tapas:constraint {
   attribute scheme { "RNC" | "RNG" | "Schematron" },
   filepath
}

css_file = 
## Relative path to a CSS file
element tapas:css_file { filepath }

js_file = 
## Relative path to a Javascript file
element tapas:js_file { filepath }

# a path in our universe is always a relative filepath; if you want characters
# in the filename that are not allowed in a URI, you would have to use the %HEX
# encoding method
filepath = xs:anyURI { pattern = "[\-A-Za-z0-9$_.+!*'(),%/]+" }

# specify the input port(s) for the pipeline. For now two of these SHOULD be
#   <tapas:port put="in" primary="true">source</>
#   <tapas:port put="out" primary="true">result</>
# although we can imagine that in the future there may be more than one input
# port, and it is possible someone would want to use different port names, albeit
# unlikely.
input_port = element tapas:port {
   attribute put {"in"},
   attribute primary { xs:boolean },
   xs:NCName { pattern = ".+" }
}
output_port = element tapas:port {
   attribute put {"out"},
   attribute primary {"true"},
   xs:NCName { pattern = ".+" }
}
option = element tapas:option {
   attribute name { xs:NCName },
   attribute namespace { xs:anyURI }?,
   # no content; the value of an option (if we ever implement this) will be specified
   # by Hydra as it calls eXist, likely under end-user control
   empty
}

phrase = (
   text
 | element html:em { phrase* }
 | element html:strong { phrase* }
 | element html:dfn { phrase* }
 | element html:code { phrase* }
 | element html:samp { phrase* }
 | element html:kbd { phrase* }
 | element html:var { phrase* }
 | element html:cite { phrase* }
 | element html:abbr { phrase* }
 | element html:acronym { phrase* }
 )
