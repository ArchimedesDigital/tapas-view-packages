datatypes xs   = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace tapas="http://www.wheatoncollege.edu/TAPAS/1.0"
namespace html ="http://www.w3.org/1999/xhtml"

# RELAX NG schema for TAPAS View Package configuration files.
# Written 2017-01-04 by Syd Bauman & Ashley Clark
# Copyleft

start = element tapas:view_package {

   # the version number of the *package* document
   attribute version { xs:string { pattern = "[0-9]+(\.[0-9]+(\.[0-9]+[αβ]?)?)?" } },

   # the ID is the name of this package from the computer's point of view (e.g., "color-blocks")
   attribute xml:id { xs:ID },

   # the name from a human's point of view (e.g., "Color Blocks")
   element tapas:human_name { text },

   # false means static, i.e. there is an HTML or other output file sitting around ready to
   # be served out
   attribute dynamic { xs:boolean },

   # whether the usable or expected input is:
   #  * a single TEI file,
   #  * a selected set of TEI files, 
   #  * an entire collection, or
   #  * all the collections in an entire project
   #  * all of the publicly viewable documents in TAPAS 
   attribute scope { "file" | "found_set" | "collection" | "project" | "public" },

   # Short (1 para) human-readable description to be published; can use in-line HTML elements
   element tapas:description { phrase* },

   # the kind(s) of files this view package can handle as the main input
   element tapas:file_types { file_type+ },

   # a path relative to the package file to a directory which contains the CSS
   element tapas:css_dir { path? },

   # a path relative to the package file to a directory which contains the Javascript
   element tapas:js_dir { path? },

   # parameters from Hydra to eXist
   element tapas:parameters { parameter* },

   # EITHER use XProc or direct execution of ( constraints, ( XQuery+ | XSLT+ ) )
   # HOWEVER note that for the moment XQuery is not supported (because it's a pain
   # to execute an XQuery from within the tapas-xq XQuery that is handling the 
   # request in eXist).
   ( manual | xproc | xslt )
}


manual =
   # list of useful schemas against which candidate input files should
   # be run, in the order specified. (If & when we have the capability
   # to run validity tests in parallel we will need a different
   # container element or some such.) I (Syd) am not sure why we have
   # this separate from <tapas:XProc>, below. I'm guessing that we
   # anticipate there will be packages that use XProc and those that
   # don't.
   element tapas:constraints { constraint* },
   ( xquery+ | xslt+ )


# The program to be run to generate output from input file(s)
# Currently presumed to be a file in the same directory as this
# config file
xquery = element tapas:run {
   attribute type {"xquery"},
   attribute pgm { xs:NMTOKEN },
   parameter*
}
xslt = element tapas:run {
   attribute type {"xslt"},
   attribute pgm { xs:NMTOKEN },
   parameter*
}
xproc = element tapas:run {
   attribute type {"xproc"},
   attribute pgm { xs:NMTOKEN },
   Pparameter*
}


file_type = element tapas:file_type { "ography" | "tei" | "odd" | "xslt" }

parameter = element tapas:parameter {
   attribute name { xs:NMTOKEN },
   attribute as { xs:string },
   text
   }
Pparameter = element tapas:parameter {
   attribute port { xs:NMTOKEN },
   attribute name { xs:NMTOKEN },
   text
   }

# Relative path to a single schema, for now either RELAX NG or ISO Schematron.
# The system may either differentiate by extension, or use the value of the
# @scheme attribute. Possibilities are:
#    extn     @scheme      kind
#    ----     --------     ----------------
#  * .rnc     RNC          RELAX NG compact syntax
#  * .rng     RNG          RELAX NG XML syntax
#  * .sch     Schematron   ISO Schematron
#  * .isosch  Schematron   ISO Schematron
# It is an error (that we don't test for) to specify "RNG" on a .rnc file, e.g.
# Note that ODD files are not in the list. If you need to validate against the
# output of an ODD, for now you need to generate that separately and include
# the output here.)
constraint = element tapas:constraint {
   attribute scheme { "RNC" | "RNG" | "Schematron" },
   path
}

# a path in our universe is always a relative filepath; if you want characters
# in the filename that are not allowed in a URI, you would have to use the %HEX
# encoding method
path = xs:anyURI { pattern = "[\-A-Za-z0-9$_.+!*'(),%/]+/" }

phrase = (
   text
 | element html:em { phrase* }
 | element html:strong { phrase* }
 | element html:dfn { phrase* }
 | element html:code { phrase* }
 | element html:samp { phrase* }
 | element html:kbd { phrase* }
 | element html:var { phrase* }
 | element html:cite { phrase* }
 | element html:abbr { phrase* }
 | element html:acronym { phrase* }
 )
